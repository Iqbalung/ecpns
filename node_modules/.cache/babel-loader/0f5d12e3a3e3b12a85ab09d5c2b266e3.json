{"ast":null,"code":"const flatDeep = function (arr) {\n  let d = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return d > 0 ? arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flatDeep(val, d - 1) : val), []) : arr.slice();\n};\n\nconst slugify = function (text) {\n  return text.toString().toLowerCase().replace(/\\s+/g, '-') // Replace spaces with -\n  .replace(/[^\\w-]+/g, '') // Remove all non-word chars\n  .replace(/--+/g, '-') // Replace multiple - with single -\n  .replace(/^-+/, '') // Trim - from start of text\n  .replace(/-+$/, ''); // Trim - from end of text\n};\n\nconst containsObject = function (obj, list) {\n  var i;\n\n  for (i = 0; i < list.length; i++) {\n    if (list[i].slug === obj.slug) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nconst formatPrice = number => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  }).format(number);\n};\n\nconst getUniqueValues = function (data, type) {\n  let withAll = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'active';\n  let unique = data.map(item => item[type]);\n\n  if (withAll === 'active') {\n    return ['all', ...new Set(unique)];\n  } else {\n    return [...new Set(unique)];\n  }\n};\n\nconst getUniqueValues2 = (data, itemName) => {\n  const items = data.map(item => {\n    return item.itemName;\n  });\n  let singleCatArray = flatDeep(items);\n  let itemArray = [];\n  singleCatArray.forEach(cat => {\n    const obj = {\n      title: cat.trim(),\n      slug: slugify(cat),\n      count: 1\n    };\n    const objIndex = containsObject(obj, itemArray);\n\n    if (objIndex !== -1) {\n      const prevCount = itemArray[objIndex].count;\n      itemArray[objIndex] = {\n        title: cat.trim(),\n        slug: slugify(cat),\n        count: prevCount + 1\n      };\n    } else {\n      itemArray.push(obj);\n    }\n  });\n};\n\nexport { flatDeep, slugify, containsObject, formatPrice, getUniqueValues, getUniqueValues2 };","map":{"version":3,"sources":["/home/fathurrohman/Works/eduvibe/src/utils/index.js"],"names":["flatDeep","arr","d","reduce","acc","val","concat","Array","isArray","slice","slugify","text","toString","toLowerCase","replace","containsObject","obj","list","i","length","slug","formatPrice","number","Intl","NumberFormat","style","currency","format","getUniqueValues","data","type","withAll","unique","map","item","Set","getUniqueValues2","itemName","items","singleCatArray","itemArray","forEach","cat","title","trim","count","objIndex","prevCount","push"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,UAAUC,GAAV,EAAuB;AAAA,MAARC,CAAQ,uEAAJ,CAAI;AACpC,SAAOA,CAAC,GAAG,CAAJ,GAAQD,GAAG,CAACE,MAAJ,CAAY,CAAEC,GAAF,EAAOC,GAAP,KAAgBD,GAAG,CAACE,MAAJ,CAAYC,KAAK,CAACC,OAAN,CAAeH,GAAf,IAAuBL,QAAQ,CAAEK,GAAF,EAAOH,CAAC,GAAG,CAAX,CAA/B,GAAgDG,GAA5D,CAA5B,EAA+F,EAA/F,CAAR,GAA8GJ,GAAG,CAACQ,KAAJ,EAArH;AACH,CAFD;;AAIA,MAAMC,OAAO,GAAG,UAAUC,IAAV,EAAiB;AAC7B,SAAOA,IAAI,CACNC,QADE,GAEFC,WAFE,GAGFC,OAHE,CAGO,MAHP,EAGe,GAHf,EAGqB;AAHrB,GAIFA,OAJE,CAIO,UAJP,EAImB,EAJnB,EAIwB;AAJxB,GAKFA,OALE,CAKO,MALP,EAKe,GALf,EAKqB;AALrB,GAMFA,OANE,CAMO,KANP,EAMc,EANd,EAMmB;AANnB,GAOFA,OAPE,CAOO,KAPP,EAOc,EAPd,CAAP,CAD6B,CAQH;AAC7B,CATD;;AAWA,MAAMC,cAAc,GAAG,UAAUC,GAAV,EAAeC,IAAf,EAAsB;AACzC,MAAIC,CAAJ;;AACA,OAAMA,CAAC,GAAG,CAAV,EAAaA,CAAC,GAAGD,IAAI,CAACE,MAAtB,EAA8BD,CAAC,EAA/B,EAAoC;AAChC,QAAKD,IAAI,CAACC,CAAD,CAAJ,CAAQE,IAAR,KAAiBJ,GAAG,CAACI,IAA1B,EAAiC;AAC7B,aAAOF,CAAP;AACH;AACJ;;AACD,SAAO,CAAC,CAAR;AACH,CARD;;AAUA,MAAMG,WAAW,GAAKC,MAAF,IAAc;AAC9B,SAAO,IAAIC,IAAI,CAACC,YAAT,CAAuB,OAAvB,EAAgC;AACnCC,IAAAA,KAAK,EAAE,UAD4B;AAEnCC,IAAAA,QAAQ,EAAE;AAFyB,GAAhC,EAGHC,MAHG,CAGKL,MAHL,CAAP;AAIH,CALD;;AAOA,MAAMM,eAAe,GAAG,UAAEC,IAAF,EAAQC,IAAR,EAAsC;AAAA,MAAxBC,OAAwB,uEAAd,QAAc;AAC1D,MAAIC,MAAM,GAAGH,IAAI,CAACI,GAAL,CAAYC,IAAF,IAAYA,IAAI,CAACJ,IAAD,CAA1B,CAAb;;AACA,MAAKC,OAAO,KAAK,QAAjB,EAA4B;AACxB,WAAO,CAAC,KAAD,EAAQ,GAAG,IAAII,GAAJ,CAASH,MAAT,CAAX,CAAP;AACH,GAFD,MAEO;AACH,WAAO,CAAC,GAAG,IAAIG,GAAJ,CAASH,MAAT,CAAJ,CAAP;AACH;AACJ,CAPD;;AASA,MAAMI,gBAAgB,GAAG,CAAEP,IAAF,EAAQQ,QAAR,KAAsB;AAC3C,QAAMC,KAAK,GAAGT,IAAI,CAACI,GAAL,CAASC,IAAI,IAAI;AAC3B,WAAOA,IAAI,CAACG,QAAZ;AACH,GAFa,CAAd;AAIA,MAAIE,cAAc,GAAGvC,QAAQ,CAAEsC,KAAF,CAA7B;AACA,MAAIE,SAAS,GAAG,EAAhB;AACAD,EAAAA,cAAc,CAACE,OAAf,CAAwBC,GAAG,IAAI;AAC3B,UAAM1B,GAAG,GAAG;AACR2B,MAAAA,KAAK,EAAED,GAAG,CAACE,IAAJ,EADC;AAERxB,MAAAA,IAAI,EAAEV,OAAO,CAAEgC,GAAF,CAFL;AAGRG,MAAAA,KAAK,EAAE;AAHC,KAAZ;AAKA,UAAMC,QAAQ,GAAG/B,cAAc,CAAEC,GAAF,EAAOwB,SAAP,CAA/B;;AACA,QAAIM,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACjB,YAAMC,SAAS,GAAGP,SAAS,CAACM,QAAD,CAAT,CAAoBD,KAAtC;AACAL,MAAAA,SAAS,CAACM,QAAD,CAAT,GAAsB;AAClBH,QAAAA,KAAK,EAAED,GAAG,CAACE,IAAJ,EADW;AAElBxB,QAAAA,IAAI,EAAEV,OAAO,CAAEgC,GAAF,CAFK;AAGlBG,QAAAA,KAAK,EAAEE,SAAS,GAAG;AAHD,OAAtB;AAKH,KAPD,MAOO;AACHP,MAAAA,SAAS,CAACQ,IAAV,CAAgBhC,GAAhB;AACH;AACJ,GAjBD;AAkBH,CAzBD;;AA2BA,SAAShB,QAAT,EAAmBU,OAAnB,EAA4BK,cAA5B,EAA4CM,WAA5C,EAAyDO,eAAzD,EAA0EQ,gBAA1E","sourcesContent":["const flatDeep = function( arr, d = 1 ) {\r\n    return d > 0 ? arr.reduce( ( acc, val ) => acc.concat( Array.isArray (val ) ? flatDeep( val, d - 1 ) : val ), [] ) : arr.slice();\r\n}\r\n\r\nconst slugify = function( text ) {\r\n    return text\r\n        .toString()\r\n        .toLowerCase()\r\n        .replace( /\\s+/g, '-' ) // Replace spaces with -\r\n        .replace( /[^\\w-]+/g, '' ) // Remove all non-word chars\r\n        .replace( /--+/g, '-' ) // Replace multiple - with single -\r\n        .replace( /^-+/, '' ) // Trim - from start of text\r\n        .replace( /-+$/, '' ) // Trim - from end of text\r\n}\r\n\r\nconst containsObject = function( obj, list ) {\r\n    var i;\r\n    for ( i = 0; i < list.length; i++ ) {\r\n        if ( list[i].slug === obj.slug ) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nconst formatPrice = ( number ) => {\r\n    return new Intl.NumberFormat( 'en-US', {\r\n        style: 'currency',\r\n        currency: 'USD'\r\n    } ).format( number )\r\n}\r\n  \r\nconst getUniqueValues = ( data, type, withAll = 'active' ) => {\r\n    let unique = data.map( ( item ) => item[type] );\r\n    if ( withAll === 'active' ) {\r\n        return ['all', ...new Set( unique )];\r\n    } else {\r\n        return [...new Set( unique )];\r\n    }\r\n}\r\n\r\nconst getUniqueValues2 = ( data, itemName ) => {\r\n    const items = data.map(item => {\r\n        return item.itemName;\r\n    } );\r\n\r\n    let singleCatArray = flatDeep( items );\r\n    let itemArray = [];\r\n    singleCatArray.forEach( cat => {\r\n        const obj = {\r\n            title: cat.trim(),\r\n            slug: slugify( cat ),\r\n            count: 1\r\n        }\r\n        const objIndex = containsObject( obj, itemArray );\r\n        if( objIndex !== -1 ){\r\n            const prevCount = itemArray[objIndex].count;\r\n            itemArray[objIndex] = {\r\n                title: cat.trim(),\r\n                slug: slugify( cat ),\r\n                count: prevCount + 1\r\n            }\r\n        } else {\r\n            itemArray.push( obj );\r\n        }\r\n    } );\r\n}\r\n\r\nexport { flatDeep, slugify, containsObject, formatPrice, getUniqueValues, getUniqueValues2 }"]},"metadata":{},"sourceType":"module"}