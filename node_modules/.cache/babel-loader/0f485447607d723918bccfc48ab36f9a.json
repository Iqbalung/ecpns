{"ast":null,"code":"const filter_reducer = (state, action) => {\n  if (action.type === 'LOAD_COURSES') {\n    let maxPrice = action.payload.map(p => p.price);\n    maxPrice = Math.max(...maxPrice);\n    let minPrice = action.payload.map(p => p.price);\n    minPrice = Math.min(...minPrice);\n    return { ...state,\n      all_courses: [...action.payload],\n      filtered_courses: [...action.payload],\n      filters: { ...state.filters,\n        max_price: maxPrice,\n        min_price: minPrice,\n        price: maxPrice\n      }\n    };\n  }\n\n  if (action.type === 'UPDATE_SORT') {\n    return { ...state,\n      sorting: action.payload\n    };\n  }\n\n  if (action.type === 'UPDATE_SEARCH') {\n    const {\n      name,\n      value\n    } = action.payload;\n    return { ...state,\n      [name]: value\n    };\n  }\n\n  if (action.type === 'SEARCH_COURSES') {\n    const {\n      searchbycourse,\n      filtered_courses\n    } = state;\n    let tempCourses = [...filtered_courses];\n\n    if (searchbycourse) {\n      tempCourses = tempCourses.filter(course => {\n        return course.title.toLowerCase().search(searchbycourse.toLowerCase().trim()) !== -1;\n      });\n    }\n\n    return { ...state,\n      filtered_courses: tempCourses\n    };\n  }\n\n  if (action.type === 'UPDATE_FILTERS') {\n    const {\n      name,\n      value\n    } = action.payload;\n    return { ...state,\n      filters: { ...state.filters,\n        [name]: value\n      }\n    };\n  }\n\n  if (action.type === 'FILTER_COURSES') {\n    const {\n      all_courses\n    } = state;\n    const {\n      filterbylevel,\n      filterbyprice,\n      coursesortby,\n      price\n    } = state.filters;\n    let tempCourses = [...all_courses];\n\n    if (filterbylevel !== 'all') {\n      tempCourses = tempCourses.filter(course => course.level === filterbylevel);\n    }\n\n    if (coursesortby === 'name-a') {\n      tempCourses = tempCourses.sort((a, b) => {\n        return a.title.localeCompare(b.title);\n      });\n    }\n\n    if (coursesortby === 'name-z') {\n      tempCourses = tempCourses.sort((a, b) => {\n        return b.title.localeCompare(a.title);\n      });\n    }\n\n    if (coursesortby === 'featured') {\n      tempCourses = tempCourses.filter(course => course.featured === true);\n    }\n\n    if (filterbyprice === 'price-lowest') {\n      tempCourses = tempCourses.sort((a, b) => {\n        return a.price - b.price;\n      });\n    }\n\n    if (filterbyprice === 'price-highest') {\n      tempCourses = tempCourses.sort((a, b) => b.price - a.price);\n    }\n\n    if (filterbyprice === 'free') {\n      tempCourses = tempCourses.filter(course => course.price === '0');\n    }\n\n    if (filterbyprice === 'paid') {\n      tempCourses = tempCourses.filter(course => course.price !== '0');\n    } // price range\n\n\n    tempCourses = tempCourses.filter(course => course.price <= price);\n    return { ...state,\n      filtered_courses: tempCourses\n    };\n  }\n\n  if (action.type === 'CLEAR_FILTERS') {\n    return { ...state,\n      searchbycourse: '',\n      filters: { ...state.filters,\n        text: '',\n        coursesortby: 'none',\n        filterbyprice: 'no-filter-price',\n        filterbylevel: 'all',\n        price: state.filters.max_price\n      }\n    };\n  }\n\n  throw new Error(`No Matching '${action.type}' - action type found.`);\n};\n\nexport default filter_reducer;","map":{"version":3,"sources":["/home/fathurrohman/Works/eduvibe/src/reducers/filter_reducer.js"],"names":["filter_reducer","state","action","type","maxPrice","payload","map","p","price","Math","max","minPrice","min","all_courses","filtered_courses","filters","max_price","min_price","sorting","name","value","searchbycourse","tempCourses","filter","course","title","toLowerCase","search","trim","filterbylevel","filterbyprice","coursesortby","level","sort","a","b","localeCompare","featured","text","Error"],"mappings":"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","sourcesContent":["const filter_reducer = ( state, action ) => {\n    if ( action.type === 'LOAD_COURSES' ) {\n        let maxPrice = action.payload.map( ( p ) => p.price )\n        maxPrice = Math.max( ...maxPrice )\n            \n        let minPrice = action.payload.map( ( p ) => p.price )\n        minPrice = Math.min( ...minPrice )\n\n        return {\n            ...state,\n            all_courses: [...action.payload],\n            filtered_courses: [...action.payload],\n            filters: { \n                ...state.filters, \n                max_price: maxPrice, \n                min_price: minPrice, \n                price: maxPrice \n            }\n        }\n    }\n\n    if ( action.type === 'UPDATE_SORT' ) {\n        return { ...state, sorting: action.payload }\n    }\n\n    if ( action.type === 'UPDATE_SEARCH' ) {\n        const { name, value } = action.payload;\n        return { ...state, [name]: value }\n    }\n\n    if ( action.type === 'SEARCH_COURSES' ) {\n        const { searchbycourse, filtered_courses } = state;\n        let tempCourses = [...filtered_courses];\n        if ( searchbycourse ) {\n            tempCourses = tempCourses.filter( ( course ) => {\n                return course.title.toLowerCase().search( searchbycourse.toLowerCase().trim() ) !== -1\n            } )\n        }\n        return { ...state, filtered_courses: tempCourses }\n    }\n\n    if ( action.type === 'UPDATE_FILTERS' ) {\n        const { name, value } = action.payload\n        return { ...state, filters: { ...state.filters, [name]: value } }\n    }\n\n    if ( action.type === 'FILTER_COURSES' ) {\n        const { all_courses } = state\n        const { filterbylevel, filterbyprice, coursesortby, price } = state.filters\n        let tempCourses = [...all_courses];\n        \n        if ( filterbylevel !== 'all' ) {\n            tempCourses = tempCourses.filter(\n                ( course ) => course.level === filterbylevel\n            )\n        }\n\n        if ( coursesortby === 'name-a' ) {\n            tempCourses = tempCourses.sort( ( a, b ) => {\n                return a.title.localeCompare( b.title )\n            } )\n        }\n        if ( coursesortby === 'name-z' ) {\n            tempCourses = tempCourses.sort( ( a, b ) => {\n                return b.title.localeCompare(a.title)\n            } )\n        }\n        if ( coursesortby === 'featured' ) {\n            tempCourses = tempCourses.filter(\n                ( course ) => course.featured === true\n            )\n        }\n\n        if ( filterbyprice === 'price-lowest' ) {\n            tempCourses = tempCourses.sort( ( a, b ) => {\n                return a.price - b.price\n            } )\n        }\n        if ( filterbyprice === 'price-highest' ) {\n            tempCourses = tempCourses.sort( ( a, b ) => b.price - a.price )\n        }\n        if ( filterbyprice === 'free' ) {\n            tempCourses = tempCourses.filter(\n                ( course ) => course.price === '0'\n            )\n        }\n        if ( filterbyprice === 'paid' ) {\n            tempCourses = tempCourses.filter(\n                ( course ) => course.price !== '0'\n            )\n        }\n\n        // price range\n        tempCourses = tempCourses.filter( ( course ) => course.price <= price )\n  \n        return { ...state, filtered_courses: tempCourses }\n    }\n    if ( action.type === 'CLEAR_FILTERS' ) {\n        return {\n            ...state,\n            searchbycourse: '',\n            filters: {\n                ...state.filters,\n                text: '',\n                coursesortby: 'none',\n                filterbyprice: 'no-filter-price',\n                filterbylevel: 'all',\n                price: state.filters.max_price\n            }\n        }\n    }\n    throw new Error( `No Matching '${action.type}' - action type found.` );\n}\n\nexport default filter_reducer;"]},"metadata":{},"sourceType":"module"}